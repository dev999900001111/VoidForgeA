Below is a list of the variables, constants, ViewChild, and functions that would be needed in the TypeScript component file to support the provided Angular template:

### Variables:
1. `comments`, `Array<{authorId: string, createdAt: Date, content: string}>` - An array of comment objects that contains the `authorId`, `createdAt`, and `content` for each comment.
2. `commentContent`, `string` - A string variable that holds the content of the new comment being added through the form.

### Constants:
- No explicit constants are defined in the provided HTML snippet. However, if there are any predefined values that are used in the component (such as configuration for the date pipe), they would be considered constants.

### ViewChild:
- No `ViewChild` or `ViewChildren` are explicitly required by the provided HTML snippet. However, if direct access to any of the Angular Material components is needed (for example, to programmatically control the expansion panels), then `ViewChild` references would be necessary.

### Functions:
1. `add.emit`, `Function` - A function that is called when the form is submitted. It emits an event with the new comment content. This would typically be an `EventEmitter` method in the component class.

### Pipes:
1. `userName`, `PipeTransform` - A custom pipe that would need to be implemented to transform the `authorId` into a human-readable username.
2. `date`, `PipeTransform` - A pipe (likely provided by Angular) that formats the `createdAt` date into a short format.
3. `slice`, `PipeTransform` - A pipe provided by Angular that is used to truncate the comment content to the first 100 characters.

### Additional Notes:
- The `ngModel` directive suggests that the `FormsModule` must be imported in the module where this component is declared.
- The `mat-expansion-panel`, `mat-expansion-panel-header`, `mat-panel-title`, `mat-panel-description`, `mat-form-field`, `mat-label`, `textarea`, `matInput`, and `mat-raised-button` suggest that the `MatExpansionModule`, `MatFormFieldModule`, `MatInputModule`, and `MatButtonModule` from Angular Material must be imported as well.
- The `required` attribute in the form suggests that form validation will be used, so the component should handle validation errors appropriately.

Please note that the actual TypeScript code for the component class would include additional details such as imports, decorators (`@Component`, `@Output`, etc.), and possibly other lifecycle hooks or services depending on the broader context of the application.